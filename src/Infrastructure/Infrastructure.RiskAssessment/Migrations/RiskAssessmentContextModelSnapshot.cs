// <auto-generated />
using System;
using Infrastructure.RiskAssessment.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.RiskAssessment.Migrations
{
    [DbContext(typeof(RiskAssessmentContext))]
    partial class RiskAssessmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Must")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RiskItemDiv")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RiskItemTitle")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RiskItemType")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("RiskMasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RiskMasterId");

                    b.ToTable("RiskItems");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anwser")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("RiskItemContentTitle")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("RiskItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RiskItemId");

                    b.ToTable("RiskItemContents");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RiskName")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RiskMasters");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskItem", b =>
                {
                    b.HasOne("SharedDomain.Entities.Risk.RiskMaster", "RiskMaster")
                        .WithMany("RiskItems")
                        .HasForeignKey("RiskMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskMaster");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskItemContent", b =>
                {
                    b.HasOne("SharedDomain.Entities.Risk.RiskItem", "RiskItem")
                        .WithMany("RiskItemContents")
                        .HasForeignKey("RiskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskItem");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskItem", b =>
                {
                    b.Navigation("RiskItemContents");
                });

            modelBuilder.Entity("SharedDomain.Entities.Risk.RiskMaster", b =>
                {
                    b.Navigation("RiskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
