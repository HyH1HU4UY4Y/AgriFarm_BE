// <auto-generated />
using System;
using Infrastructure.FarmScheduling.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.FarmScheduling.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    [Migration("20240318103420_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.BaseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasDiscriminator<string>("Type").HasValue("BaseComponent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCompletable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TagId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.ActivityParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParticipantId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ActivityParticipants");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.AdditionOfActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.CultivationSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Cultivations.ProductionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("HarvestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<double?>("TotalQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Traceability")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Unit")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeedId");

                    b.ToTable("ProductionDetail");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SharedDomain.Entities.Users.MinimalUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarImg")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmEquipment", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Equipment");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmFertilize", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Fertilize");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmPesticide", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Pesticide");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmProduct", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("FarmProduct");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmSeed", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Seed");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmSoil", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Soil");
                });

            modelBuilder.Entity("SharedDomain.Entities.FarmComponents.FarmWater", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.FarmComponents.BaseComponent");

                    b.HasDiscriminator().HasValue("Water");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.HarvestDetail", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.Schedules.AdditionOfActivity");

                    b.Property<Guid>("ProductionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasIndex("ProductionId");

                    b.ToTable("HarvestDetails");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.TrainingDetail", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.Schedules.AdditionOfActivity");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.ToTable("TrainingDetails");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.TreatmentDetail", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.Schedules.AdditionOfActivity");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.HasIndex("ComponentId");

                    b.ToTable("TreatmentDetails");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.UsingDetail", b =>
                {
                    b.HasBaseType("SharedDomain.Entities.Schedules.AdditionOfActivity");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<double>("UseValue")
                        .HasColumnType("double precision");

                    b.HasIndex("ComponentId");

                    b.ToTable("UsingDetails");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Activity", b =>
                {
                    b.HasOne("SharedDomain.Entities.FarmComponents.FarmSoil", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SharedDomain.Entities.Schedules.CultivationSeason", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.Schedules.Tag", null)
                        .WithMany("Activities")
                        .HasForeignKey("TagId");

                    b.Navigation("Location");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.ActivityParticipant", b =>
                {
                    b.HasOne("SharedDomain.Entities.Schedules.Activity", "Activity")
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId")
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.Users.MinimalUserInfo", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.AdditionOfActivity", b =>
                {
                    b.HasOne("SharedDomain.Entities.Schedules.Activity", "Activity")
                        .WithMany("Addtions")
                        .HasForeignKey("ActivityId")
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Cultivations.ProductionDetail", b =>
                {
                    b.HasOne("SharedDomain.Entities.FarmComponents.FarmSoil", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.FarmComponents.FarmProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.Schedules.CultivationSeason", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.FarmComponents.FarmSeed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .IsRequired();

                    b.Navigation("Land");

                    b.Navigation("Product");

                    b.Navigation("Season");

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.HarvestDetail", b =>
                {
                    b.HasOne("SharedDomain.Entities.Schedules.Cultivations.ProductionDetail", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.TreatmentDetail", b =>
                {
                    b.HasOne("SharedDomain.Entities.FarmComponents.BaseComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Additions.UsingDetail", b =>
                {
                    b.HasOne("SharedDomain.Entities.FarmComponents.BaseComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Activity", b =>
                {
                    b.Navigation("Addtions");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SharedDomain.Entities.Schedules.Tag", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
