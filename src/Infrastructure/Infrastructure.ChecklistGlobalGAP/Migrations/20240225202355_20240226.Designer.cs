// <auto-generated />
using System;
using Infrastructure.ChecklistGlobalGAP.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.ChecklistGlobalGAP.Migrations
{
    [DbContext(typeof(ChecklistGlobalGAPContext))]
    [Migration("20240225202355_20240226")]
    partial class _20240226
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AfNum")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("ChecklistMasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResponse")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LevelRoute")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistMasterId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistItemResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("ChecklistItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChecklistMappingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistItemId");

                    b.HasIndex("ChecklistMappingId");

                    b.ToTable("ChecklistItemResponses");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChecklistMasterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistMasterId");

                    b.ToTable("ChecklistMapping");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Version"));

                    b.HasKey("Id");

                    b.ToTable("ChecklistMasters");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistItem", b =>
                {
                    b.HasOne("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMaster", "ChecklistMaster")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("ChecklistMasterId")
                        .IsRequired();

                    b.Navigation("ChecklistMaster");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistItemResponse", b =>
                {
                    b.HasOne("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistItem", "CheklistItem")
                        .WithMany()
                        .HasForeignKey("ChecklistItemId")
                        .IsRequired();

                    b.HasOne("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMapping", "ChecklistMapping")
                        .WithMany("ChecklistItemResponses")
                        .HasForeignKey("ChecklistMappingId")
                        .IsRequired();

                    b.Navigation("ChecklistMapping");

                    b.Navigation("CheklistItem");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMapping", b =>
                {
                    b.HasOne("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMaster", "ChecklistMaster")
                        .WithMany()
                        .HasForeignKey("ChecklistMasterId")
                        .IsRequired();

                    b.Navigation("ChecklistMaster");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMapping", b =>
                {
                    b.Navigation("ChecklistItemResponses");
                });

            modelBuilder.Entity("SharedDomain.Entities.ChecklistGlobalGAP.ChecklistMaster", b =>
                {
                    b.Navigation("ChecklistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
